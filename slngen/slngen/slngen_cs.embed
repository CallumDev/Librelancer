//SLNGEN v1.0
//Generates SLN file based on current running platform.
//Support Code
using System;
using System.Collections.Generic;

class ProjectDef { public string Path; public string Folder; public BPlatforms Platform; public string Guid; public string TypeGuid; public List<string> Deps; }
class SlnItem { public string Path; public string Folder; }
List<ProjectDef> projects = new List<ProjectDef>();
List<SlnItem> slnitems = new List<SlnItem>();
List<string> configs = new List<string>();
Action<string> CONFIGURATION = (name) => { configs.Add(name); };
Action<string,string> SOLUTION_ITEM = (name, folder) => { slnitems.Add(new SlnItem() { Path = name, Folder = folder });};
Action<string> PROJECT = (name) => { projects.Add(new ProjectDef() { Path = name, Platform = BPlatforms.All });};
Action<string,string> PROJECTF = (name, folder) => { projects.Add(new ProjectDef() { Path = name, Folder = folder, Platform = BPlatforms.All }); };
Action<string,string,BPlatforms> PROJECTFP = (name, folder, plat) => { projects.Add(new ProjectDef() { Path = name, Folder = folder, Platform = plat }); };

//Project Config
<INSERT_CONFIG_HERE>

//Runner
Console.WriteLine("SLNGEN v1.0");
using System.IO;
BPlatforms currentPlatform = BPlatforms.Windows;
switch (Environment.OSVersion.Platform) {
	case PlatformID.Unix:
		if (Directory.Exists ("/Applications")
			& Directory.Exists ("/System")
			& Directory.Exists ("/Users")
			& Directory.Exists ("/Volumes")) {
				currentPlatform = BPlatforms.MacOS;
			} else {
				currentPlatform = BPlatforms.Linux;
			}
		break;
	case PlatformID.MacOSX:
		currentPlatform = BPlatforms.MacOS;
		break;
}
string msbuild_path = "";
if(currentPlatform == BPlatforms.Windows) {
	var msbuildver = 0.0;
	foreach(var directory in Directory.GetDirectories("C:\\Program Files (x86)\\MSBuild")) {
		var split = directory.Split('\\');
		var ver = split[split.Length - 1];
		double d;
		if(double.TryParse(ver, out d)) {
			msbuildver = Math.Max(d, msbuildver);
		}
	}
	if(msbuildver > 0) {
		msbuild_path = "C:\\Program Files (x86)\\MSBuild\\" + msbuildver.ToString("0.0") + "\\Bin\\";
		if(IntPtr.Size == 8) msbuild_path += "amd64\\";
		Console.WriteLine("MSBuild Auto-detection: " + msbuild_path);
	}
}
LoadAssembly(msbuild_path + "Microsoft.Build.dll");
LoadAssembly(msbuild_path +"Microsoft.Build.Engine.dll");
using Microsoft.Build.Evaluation;

Console.WriteLine("Platform: {0}", currentPlatform);
slnname = string.Format(slnname, currentPlatform.ToString());
Console.WriteLine("Enumerating Projects...");
Dictionary<string,string> slnFolders = new Dictionary<string,string>();
List<string> slnItemFolders = new List<string>();
bool hasFolders = false;
//TEST MSBUILD
bool evaluationNamespace = true;
string prpath;
foreach(var p in projects) {
	if((p.Platform & currentPlatform) != currentPlatform) continue;
	prpath = Path.Combine(basedir, p.Path);
	break;
}
var pjtest = new Project(prpath);
if(string.IsNullOrEmpty(pjtest.GetPropertyValue("ProjectGuid"))) {
	Console.WriteLine("Using Legacy MSBuild API");
	evaluationNamespace = false;
}
//RUN
foreach(var p in projects) {
	var projpath = Path.Combine(basedir, p.Path);
	if((p.Platform & currentPlatform) != currentPlatform) continue;
	p.Deps = new List<string>();
	if(evaluationNamespace) {
		Project project = new Project(projpath);
		string guid;
		guid = project.GetPropertyValue("ProjectGuid");
		p.Guid = guid;
		string projtype;
		projtype = project.GetPropertyValue("ProjectTypeGuids");
		if(string.IsNullOrEmpty(projtype))
			projtype = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
		p.TypeGuid = projtype;
		foreach(var item in project.GetItems("ProjectReference")) {
			p.Deps.Add(item.GetMetadataValue("Project"));
		}
	} else {
		Microsoft.Build.BuildEngine.Engine buildEngine = new Microsoft.Build.BuildEngine.Engine(Environment.CurrentDirectory);
		Microsoft.Build.BuildEngine.Project project = new Microsoft.Build.BuildEngine.Project(buildEngine);
		project.Load(projpath);
		string guid;
		guid = project.GetEvaluatedProperty("ProjectGuid");
		p.Guid = guid;
		string projtype;
		projtype = project.GetEvaluatedProperty("ProjectTypeGuids");
		if(string.IsNullOrEmpty(projtype))
			projtype = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
		p.TypeGuid = projtype;
	}
	if(p.Folder != null && !slnFolders.ContainsKey(p.Folder)) {
		var folderGuid = Guid.NewGuid().ToString("B").ToUpperInvariant();
		Console.WriteLine("SOLUTION FOLDER: {0} with Guid: {1}", p.Folder, folderGuid);
		slnFolders.Add(p.Folder, folderGuid);
		hasFolders = true;
	}
}
foreach(var itm in slnitems) {
	if(!slnItemFolders.Contains(itm.Folder)) slnItemFolders.Add(itm.Folder);
}
string FOLDER_GUID="{2150E333-8FDC-42A3-9474-1A3956D46DE8}";
Console.WriteLine("Outputting to: {0}", Path.Combine(basedir, slnname));
using(var writer = new StreamWriter(File.Create(Path.Combine(basedir, slnname)))) {
	writer.NewLine = "\n";
	writer.WriteLine("Microsoft Visual Studio Solution File, Format Version 12.00");
	writer.WriteLine("# Visual Studio 14");
	writer.WriteLine("VisualStudioVersion = 14.0.25420.1");
	writer.WriteLine("MinimumVisualStudioVersion = 10.0.40219.1");
	foreach(var p in projects) {
		if((p.Platform & currentPlatform) != currentPlatform) continue;
		writer.WriteLine("Project(\"{0}\") = \"{1}\", \"{2}\", \"{3}\"",
						 p.TypeGuid,
						 Path.GetFileNameWithoutExtension(p.Path),
						 p.Path.Replace("/","\\"),
						 p.Guid);
		if(p.Deps.Count > 0) {
			writer.WriteLine("\tProjectSection(ProjectDependencies) = postProject");
			foreach(var dep in p.Deps) {
				writer.WriteLine("\t\t{0} = {0}", dep);
			}
			writer.WriteLine("\tEndProjectSection");
		}
		writer.WriteLine("EndProject");
	}
	foreach(var kv in slnFolders) {
		writer.WriteLine("Project(\"{0}\") = \"{1}\", \"{1}\", \"{2}\"",
						FOLDER_GUID,
						kv.Key,
						kv.Value
						);
		writer.WriteLine("EndProject");
	}
	foreach(var fld in slnItemFolders) {
		writer.WriteLine("Project(\"{0}\") = \"{1}\", \"{1}\", \"{2}\"",
						FOLDER_GUID,
						fld,
						Guid.NewGuid().ToString("B").ToUpperInvariant()
						);
		writer.WriteLine("\tProjectSection(SolutionItems) = preProject");
		foreach(var itm in slnitems) {
			if(itm.Folder == fld) writer.WriteLine("\t\t{0} = {0}", itm.Path.Replace("/","\\"));
		}
		writer.WriteLine("\tEndProjectSection");
		writer.WriteLine("EndProject");
	}
	writer.WriteLine();
	writer.WriteLine("Global");
	writer.WriteLine("\tGlobalSection(SolutionProperties) = preSolution");
	writer.WriteLine("\t\tHideSolutionNode = FALSE");
	writer.WriteLine("\tEndGlobalSection");
	writer.WriteLine("\tGlobalSection(SolutionConfigurationPlatforms) = preSolution");
	foreach(var conf in configs)
	{
		writer.WriteLine("\t\t{0} = {0}",conf);
	}
	writer.WriteLine("\tEndGlobalSection");
	writer.WriteLine("\tGlobalSection(ProjectConfigurationPlatforms) = postSolution");
	foreach(var p in projects)
	{
		if((p.Platform & currentPlatform) != currentPlatform) continue;
		foreach(var conf in configs)
		{
			writer.WriteLine("\t\t{0}.{1}.ActiveCfg = {1}",p.Guid, conf);
			writer.WriteLine("\t\t{0}.{1}.Build.0 = {1}", p.Guid, conf);
		}
	}
	writer.WriteLine("\tEndGlobalSection");
	if(hasFolders) {
		writer.WriteLine("\tGlobalSection(NestedProjects) = preSolution");
		foreach(var p in projects) {
			if((p.Platform & currentPlatform) != currentPlatform) continue;
			if(p.Folder == null) continue;
			writer.WriteLine("\t\t{0} = {1}", p.Guid, slnFolders[p.Folder]);
		}
		writer.WriteLine("\tEndGlobalSection");
	}
	writer.WriteLine("EndGlobal");
}
