//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibreLancer.Shaders
{
    using System;
    
    public class Nomad
    {
        private static byte[] vertex_bytes = new byte[285] {
27, 139, 2, 0, 196, 194, 57, 117, 223, 168, 27, 39, 5, 118, 25, 145, 34, 112, 220, 242, 136, 7, 206, 169, 107, 225, 129, 104, 183, 101,
224, 128, 162, 57, 127, 163, 211, 1, 207, 240, 221, 90, 96, 35, 65, 200, 71, 203, 237, 22, 133, 62, 202, 57, 55, 62, 98, 209, 153, 204,
58, 171, 245, 180, 223, 104, 55, 147, 114, 76, 63, 192, 162, 232, 132, 151, 183, 119, 240, 242, 110, 15, 239, 179, 230, 216, 21, 131, 180, 124,
246, 198, 108, 226, 42, 31, 207, 155, 103, 149, 148, 206, 207, 71, 37, 16, 178, 227, 251, 243, 249, 118, 96, 224, 233, 96, 128, 3, 11, 133,
82, 210, 198, 113, 251, 112, 63, 238, 105, 197, 187, 162, 145, 121, 25, 6, 102, 166, 82, 230, 138, 180, 121, 144, 1, 251, 3, 198, 233, 79,
210, 203, 219, 187, 184, 156, 239, 168, 128, 209, 219, 144, 117, 9, 28, 33, 41, 247, 152, 235, 95, 85, 88, 186, 201, 5, 73, 65, 186, 254,
121, 34, 86, 228, 185, 130, 100, 31, 71, 133, 61, 1, 128, 23, 210, 96, 9, 41, 35, 215, 105, 169, 242, 145, 178, 137, 179, 100, 37, 136,
201, 24, 19, 200, 3, 21, 28, 123, 224, 221, 61, 182, 177, 105, 76, 144, 202, 117, 72, 82, 77, 7, 168, 32, 55, 81, 244, 243, 24, 56,
14, 19, 213, 231, 34, 77, 104, 168, 102, 103, 197, 52, 11, 84, 160, 177, 113, 26, 70, 197, 133, 4, 145, 199, 160, 147, 92, 58, 18, 168,
205, 205, 5, 67, 255, 60, 111, 161, 97, 72, 250, 174, 136, 34, 1
};
        private static byte[] fragment_bytes = new byte[244] {
27, 211, 1, 32, 196, 36, 221, 102, 178, 76, 135, 255, 87, 124, 67, 76, 214, 226, 146, 162, 19, 215, 212, 111, 126, 196, 87, 140, 42, 203,
94, 219, 223, 192, 70, 19, 156, 248, 172, 212, 27, 47, 69, 36, 188, 191, 241, 22, 149, 26, 221, 197, 7, 168, 14, 11, 181, 78, 165, 59,
246, 71, 245, 66, 185, 50, 164, 40, 234, 111, 216, 180, 191, 224, 181, 94, 58, 184, 6, 236, 243, 250, 179, 188, 94, 31, 171, 148, 227, 201,
69, 87, 128, 105, 74, 215, 128, 171, 226, 1, 152, 216, 188, 20, 81, 203, 186, 30, 149, 151, 54, 98, 133, 61, 231, 195, 135, 83, 70, 153,
71, 211, 251, 126, 236, 124, 4, 211, 236, 178, 223, 109, 162, 55, 130, 230, 229, 157, 144, 244, 39, 2, 128, 205, 233, 58, 231, 239, 241, 97,
6, 98, 117, 101, 193, 196, 171, 253, 111, 45, 166, 82, 203, 151, 93, 41, 161, 194, 54, 44, 13, 55, 225, 76, 41, 2, 0, 222, 44, 79,
243, 243, 77, 164, 86, 179, 12, 75, 91, 154, 164, 40, 180, 139, 246, 194, 200, 128, 218, 42, 120, 172, 69, 124, 138, 198, 28, 143, 50, 36,
128, 33, 102, 55, 48, 222, 179, 76, 53, 82, 104, 27, 47, 52, 30, 22, 183, 198, 99, 187, 128, 138, 11, 235, 174, 6, 115, 60, 135, 82,
148, 249, 205, 2
};
        static ShaderVariables[] variants;
        private static bool iscompiled = false;
        private static int GetIndex(ShaderFeatures features)
        {
            ShaderFeatures masked = (features & ((ShaderFeatures)(0)));
            return 0;
        }
        public static ShaderVariables Get(ShaderFeatures features)
        {
            return variants[GetIndex(features)];
        }
        public static ShaderVariables Get()
        {
            return variants[0];
        }
        public static void Compile()
        {
            if (iscompiled)
            {
                return;
            }
            iscompiled = true;
            ShaderVariables.Log("Compiling Nomad");
            string vertsrc;
            string fragsrc;
            vertsrc = ShCompHelper.FromArray(vertex_bytes);
            fragsrc = ShCompHelper.FromArray(fragment_bytes);
            variants = new ShaderVariables[1];
            variants[0] = ShaderVariables.Compile(vertsrc, fragsrc, "");
        }
    }
}
